{"expireTime":9007200827528195000,"key":"transformer-remark-markdown-html-ast-8b6bc13dc9306702acb7c31e2f9e5b09-gatsby-remark-graphgatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"When should ","position":{"start":{"line":2,"column":6,"offset":6},"end":{"line":2,"column":18,"offset":18}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":2,"column":18,"offset":18},"end":{"line":2,"column":23,"offset":23}}},{"type":"text","value":", ","position":{"start":{"line":2,"column":23,"offset":23},"end":{"line":2,"column":25,"offset":25}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":2,"column":25,"offset":25},"end":{"line":2,"column":32,"offset":32}}},{"type":"text","value":" and ","position":{"start":{"line":2,"column":32,"offset":32},"end":{"line":2,"column":37,"offset":37}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":2,"column":37,"offset":37},"end":{"line":2,"column":42,"offset":42}}},{"type":"text","value":" be used?","position":{"start":{"line":2,"column":42,"offset":42},"end":{"line":2,"column":51,"offset":51}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":51,"offset":51}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ES2015 ( and later ) spec is used when writing Javascript for the production environment. In almost all cases, we declare intent ( i.e. should the variable be reassigned within the scope of a function? ) with ","position":{"start":{"line":4,"column":1,"offset":53},"end":{"line":4,"column":214,"offset":266}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":4,"column":214,"offset":266},"end":{"line":4,"column":219,"offset":271}}},{"type":"text","value":" and ","position":{"start":{"line":4,"column":219,"offset":271},"end":{"line":4,"column":224,"offset":276}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":4,"column":224,"offset":276},"end":{"line":4,"column":231,"offset":283}}},{"type":"text","value":".","position":{"start":{"line":4,"column":231,"offset":283},"end":{"line":4,"column":232,"offset":284}}}],"position":{"start":{"line":4,"column":1,"offset":53},"end":{"line":4,"column":232,"offset":284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":6,"column":1,"offset":286},"end":{"line":6,"column":6,"offset":291}}},{"type":"text","value":" and ","position":{"start":{"line":6,"column":6,"offset":291},"end":{"line":6,"column":11,"offset":296}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":6,"column":11,"offset":296},"end":{"line":6,"column":18,"offset":303}}},{"type":"text","value":" are block-scoped and not available outside the scope, compared to ","position":{"start":{"line":6,"column":18,"offset":303},"end":{"line":6,"column":85,"offset":370}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":6,"column":85,"offset":370},"end":{"line":6,"column":90,"offset":375}}},{"type":"text","value":".","position":{"start":{"line":6,"column":90,"offset":375},"end":{"line":6,"column":91,"offset":376}}}],"position":{"start":{"line":6,"column":1,"offset":286},"end":{"line":6,"column":91,"offset":376}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Global variables are generally 'frowned-upon'. It's classified as bad practice because in a large code-base with thousand of lines, similarly named variables can be difficult to find ","position":{"start":{"line":8,"column":1,"offset":378},"end":{"line":8,"column":184,"offset":561}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"and","position":{"start":{"line":8,"column":185,"offset":562},"end":{"line":8,"column":188,"offset":565}}}],"position":{"start":{"line":8,"column":184,"offset":561},"end":{"line":8,"column":189,"offset":566}}},{"type":"text","value":" debug.","position":{"start":{"line":8,"column":189,"offset":566},"end":{"line":8,"column":196,"offset":573}}}],"position":{"start":{"line":8,"column":1,"offset":378},"end":{"line":8,"column":196,"offset":573}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use ","position":{"start":{"line":10,"column":1,"offset":575},"end":{"line":10,"column":5,"offset":579}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":10,"column":5,"offset":579},"end":{"line":10,"column":12,"offset":586}}},{"type":"text","value":" wherever possible, as we try to be explicit with our code and intent.","position":{"start":{"line":10,"column":12,"offset":586},"end":{"line":10,"column":82,"offset":656}}}],"position":{"start":{"line":10,"column":1,"offset":575},"end":{"line":10,"column":82,"offset":656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's an example:","position":{"start":{"line":12,"column":1,"offset":658},"end":{"line":12,"column":19,"offset":676}}}],"position":{"start":{"line":12,"column":1,"offset":658},"end":{"line":12,"column":19,"offset":676}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add() and multiply() are global functions</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Style A - the most verbose</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n\n<span class=\"token comment\">// Style B - much simpler, but still not explicit</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n\n<span class=\"token comment\">// Style C - simple and explicit. Declare foo and immediately assign a value with an IIFE</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n\n<span class=\"token comment\">// Style C - ES2015</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></code></pre></div>","position":{"start":{"line":14,"column":1,"offset":678},"end":{"line":41,"column":4,"offset":1266}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Caveat","position":{"start":{"line":44,"column":3,"offset":1271},"end":{"line":44,"column":9,"offset":1277}}}],"position":{"start":{"line":44,"column":1,"offset":1269},"end":{"line":44,"column":11,"offset":1279}}},{"type":"text","value":": The ","position":{"start":{"line":44,"column":11,"offset":1279},"end":{"line":44,"column":17,"offset":1285}}},{"type":"raw","value":"<code class=\"language-text\">var</code>","position":{"start":{"line":44,"column":17,"offset":1285},"end":{"line":44,"column":22,"offset":1290}}},{"type":"text","value":" keyword is still valid, ","position":{"start":{"line":44,"column":22,"offset":1290},"end":{"line":44,"column":47,"offset":1315}}},{"type":"raw","value":"<code class=\"language-text\">let</code>","position":{"start":{"line":44,"column":47,"offset":1315},"end":{"line":44,"column":52,"offset":1320}}},{"type":"text","value":" shouldn't be construed as an invitation to sprinkle variables all over a file's scope and ","position":{"start":{"line":44,"column":52,"offset":1320},"end":{"line":44,"column":143,"offset":1411}}},{"type":"raw","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":44,"column":143,"offset":1411},"end":{"line":44,"column":150,"offset":1418}}},{"type":"text","value":" doesn't mean a variable is immutable, unlike C++ along with a hundred other peculiarities.","position":{"start":{"line":44,"column":150,"offset":1418},"end":{"line":44,"column":241,"offset":1509}}}],"position":{"start":{"line":44,"column":1,"offset":1269},"end":{"line":44,"column":241,"offset":1509}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Garbage collecting","position":{"start":{"line":47,"column":5,"offset":1516},"end":{"line":47,"column":23,"offset":1534}}}],"position":{"start":{"line":47,"column":1,"offset":1512},"end":{"line":47,"column":23,"offset":1534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One other thing to note is Javascript's ","position":{"start":{"line":49,"column":1,"offset":1536},"end":{"line":49,"column":41,"offset":1576}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"garbage collection","position":{"start":{"line":49,"column":43,"offset":1578},"end":{"line":49,"column":61,"offset":1596}}}],"position":{"start":{"line":49,"column":41,"offset":1576},"end":{"line":49,"column":63,"offset":1598}}},{"type":"text","value":" feature. Global variables sit in memory ( i.e. RAM ) indefinitely and use up resources.","position":{"start":{"line":49,"column":63,"offset":1598},"end":{"line":49,"column":151,"offset":1686}}}],"position":{"start":{"line":49,"column":1,"offset":1536},"end":{"line":49,"column":151,"offset":1686}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Scoped variables are 'garbage-collected', which means if a variable is scoped within a terminated function it is removed from memory. This feature isn't obvious on modern systems with oodles of RAM, but can cause hiccups if there's a memory leak or a improperly written Raspberry Pi iOT setup ( e.g. ","position":{"start":{"line":51,"column":1,"offset":1688},"end":{"line":51,"column":301,"offset":1988}}},{"type":"element","tagName":"a","properties":{"href":"http://johnny-five.io"},"children":[{"type":"text","value":"Johnny-Five","position":{"start":{"line":51,"column":302,"offset":1989},"end":{"line":51,"column":313,"offset":2000}}}],"position":{"start":{"line":51,"column":301,"offset":1988},"end":{"line":51,"column":337,"offset":2024}}},{"type":"text","value":" )","position":{"start":{"line":51,"column":337,"offset":2024},"end":{"line":51,"column":339,"offset":2026}}}],"position":{"start":{"line":51,"column":1,"offset":1688},"end":{"line":51,"column":339,"offset":2026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Read about it ","position":{"start":{"line":53,"column":1,"offset":2028},"end":{"line":53,"column":15,"offset":2042}}},{"type":"element","tagName":"a","properties":{"href":"https://javascript.info/garbage-collection"},"children":[{"type":"text","value":"here","position":{"start":{"line":53,"column":16,"offset":2043},"end":{"line":53,"column":20,"offset":2047}}}],"position":{"start":{"line":53,"column":15,"offset":2042},"end":{"line":53,"column":65,"offset":2092}}},{"type":"text","value":".","position":{"start":{"line":53,"column":65,"offset":2092},"end":{"line":53,"column":66,"offset":2093}}}],"position":{"start":{"line":53,"column":1,"offset":2028},"end":{"line":53,"column":66,"offset":2093}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":54,"column":1,"offset":2094}}}}