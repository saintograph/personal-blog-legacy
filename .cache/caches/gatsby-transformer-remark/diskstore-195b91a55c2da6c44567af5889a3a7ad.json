{"expireTime":9007200827531568000,"key":"transformer-remark-markdown-html-dcdcbbcd3d9de618cb556718a20be422-gatsby-remark-graphgatsby-remark-katexgatsby-remark-prismjs-","val":"<h4>When should <code class=\"language-text\">let</code>, <code class=\"language-text\">const</code> and <code class=\"language-text\">var</code> be used?</h4>\n<p>The ES2015 ( and later ) spec is used when writing Javascript for the production environment. In almost all cases, we declare intent ( i.e. should the variable be reassigned within the scope of a function? ) with <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>.</p>\n<p><code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> are block-scoped and not available outside the scope, compared to <code class=\"language-text\">var</code>.</p>\n<p>Global variables are generally 'frowned-upon'. It's classified as bad practice because in a large code-base with thousand of lines, similarly named variables can be difficult to find <em>and</em> debug.</p>\n<p>Use <code class=\"language-text\">const</code> wherever possible, as we try to be explicit with our code and intent.</p>\n<p>Here's an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add() and multiply() are global functions</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Style A - the most verbose</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n\n<span class=\"token comment\">// Style B - much simpler, but still not explicit</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n\n<span class=\"token comment\">// Style C - simple and explicit. Declare foo and immediately assign a value with an IIFE</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n\n<span class=\"token comment\">// Style C - ES2015</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span></code></pre></div>\n<p><strong>Caveat</strong>: The <code class=\"language-text\">var</code> keyword is still valid, <code class=\"language-text\">let</code> shouldn't be construed as an invitation to sprinkle variables all over a file's scope and <code class=\"language-text\">const</code> doesn't mean a variable is immutable, unlike C++ along with a hundred other peculiarities.</p>\n<h3>Garbage collecting</h3>\n<p>One other thing to note is Javascript's <strong>garbage collection</strong> feature. Global variables sit in memory ( i.e. RAM ) indefinitely and use up resources.</p>\n<p>Scoped variables are 'garbage-collected', which means if a variable is scoped within a terminated function it is removed from memory. This feature isn't obvious on modern systems with oodles of RAM, but can cause hiccups if there's a memory leak or a improperly written Raspberry Pi iOT setup ( e.g. <a href=\"http://johnny-five.io\">Johnny-Five</a> )</p>\n<p>Read about it <a href=\"https://javascript.info/garbage-collection\">here</a>.</p>"}